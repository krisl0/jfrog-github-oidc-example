name: "JFrog-GitHub wildcard test"
on: push
permissions:
  id-token: write
jobs:
  build:
    runs-on: ubuntu-latest
    env:
      OIDC_AUDIENCE: 'jfrog-github'
      OIDC_PROVIDER: 'github'
    steps:
      - uses: actions/checkout@v4
        with:
          # Disabling shallow clones is recommended for improving the relevancy of reporting
          fetch-depth: 0

      - name: Check for Python files
        id: python
        run: |
          if find . -name "*.py" 2>/dev/null | grep -q .; then
            echo "Python files found"
            if [ -f "pyproject.toml" ]; then
              echo "Found pyproject.toml"
              python_version=$(grep -E '^python' pyproject.toml || echo "No version found in pyproject.toml")
            elif [ -f "requirements.txt" ]; then
              echo "Found requirements.txt"
              python_version=$(grep -oP 'This file is autogenerated by pip-compile with Python \K[0-9]+\.[0-9]+' requirements.txt || echo "No version found in requirements.txt")
            elif [ -f ".python-version" ]; then
              python_version=$(cat .python-version)
            else
              python_version="Unknown"
            fi
            echo "Python version: $python_version"
          else
            python_version="Unknown"
            echo "No Python files found"
          fi
          echo "python_version=$python_version" >> $GITHUB_OUTPUT
      - name: Check for Node.js files
        id: node
        run: |
          package_json_path=$(find . -name "package.json" | head -n 1)
          if [ -n "$package_json_path" ]; then
            echo "Node.js project found at $package_json_path"
            node_found="true"
          else
            node_found="false"
            echo "No Node.js files found"
          fi
          echo "node_found=$node_found" >> $GITHUB_OUTPUT
      - uses: actions/setup-python@v5
        if: ${{ steps.python.outputs.python_version != 'Unknown' }}
        with:
          python-version: ${{ steps.python.outputs.python_version }}

      - uses: actions/setup-node@v4
        if: ${{ steps.node.outputs.node_found == 'true' }}
        with:
          node-version: 22

      - name: Install Yarn
        if: ${{ steps.node.outputs.node_found == 'true' }}
        run: |
          npm install --global yarn
      - name: Set JFrog base branch if master
        if: github.event_name == 'schedule' || github.event_name == 'push'
        run: echo "JF_GIT_BASE_BRANCH=master" >> $GITHUB_ENV
      
      - name: Get id token
        run: |
          ID_TOKEN=$(curl -sLS -H "User-Agent: actions/oidc-client" -H "Authorization: Bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
          "${ACTIONS_ID_TOKEN_REQUEST_URL}&audience=jfrog-github" | jq .value | tr -d '"')
          echo "ID_TOKEN=${ID_TOKEN}" >> $GITHUB_ENV
    
      - name: Exchange
        env:
          ARTIFACTORY_URL: https://jonw123test.jfrog.io
        run: |
          ACCESS_TOKEN=$(curl -XPOST https://jonw123test.jfrog.io/access/api/v1/oidc/token -H "Content-type: application/json" -d "{\"grant_type\": \"urn:ietf:params:oauth:grant-type:token-exchange\", \"subject_token_type\":\"urn:ietf:params:oauth:token-type:id_token\", \"subject_token\": \"${{env.ID_TOKEN}}\", \"provider_name\": \"github\"}" | jq .access_token | tr -d '"')
          echo "::add-mask::${ACCESS_TOKEN}"
          echo "ACCESS_TOKEN=${ACCESS_TOKEN}" >> $GITHUB_ENV
        
      - uses: jfrog/setup-jfrog-cli@v4
        with:
          oidc-provider-name: github
          oidc-audience: jfrog-github
        env:
          JF_URL: "https://jonw123test.jfrog.io"
          # JF_GIT_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Configure JFrog Artifactory
        run: |
      - uses: jfrog/frogbot@v2
        env:
          JF_URL: https://jonw123test.jfrog.io
          JF_GIT_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          oidc-provider-name: jfrog-github
           
